import os
import torch
import numpy as np
import gradio as gr
from scipy.io.wavfile import write as write_wav
import warnings

from ruaccent import RUAccent
from TTS.api import TTS

warnings.filterwarnings("ignore")

try:
    from TTS.tts.configs.xtts_config import XttsConfig
    from TTS.tts.models.xtts import XttsAudioConfig, XttsArgs
    from TTS.config.shared_configs import BaseDatasetConfig
    torch.serialization.add_safe_globals([XttsConfig, XttsAudioConfig, BaseDatasetConfig, XttsArgs])
except ImportError as e:
    pass

# --------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
# --------------------
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
DEVICE_STR = "cuda" if DEVICE.type == "cuda" else "cpu"
OUTPUT_DIR = "outputs"
TEMP_DIR = os.path.join(OUTPUT_DIR, "temp")
BASE_SE_DIR = "checkpoints/base_speakers/RU_SILERO"  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
REF_TEXT = (
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ—Ä–∞ –∏ –º–∞–π—Å–∫–∏–π –¥–µ–Ω—å –¥–æ–∂–¥–ª–∏–≤—ã–π. –°–∏–∂—É —É –æ–∫–Ω–∞ –∏ —á—É–≤—Å—Ç–≤—É—é –∞—Ä–æ–º–∞—Ç. "
    "–Ø –≤—Å–ø–æ–º–∏–Ω–∞—é —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –≤—Å—Ç—Ä–µ—á—É, –∏ —Å–µ—Ä–¥—Ü–µ –±—å—ë—Ç—Å—è –≤ —É–ø–æ–µ–Ω–∏–∏. "
    "–°–ª—ã—à—É –≥–æ–ª–æ—Å, —Å–º–æ—Ç—Ä—é –Ω–∞ –±—É–∫–µ—Ç. –Ø –≤ —ç–π—Ñ–æ—Ä–∏–∏! –°–Ω–æ–≤–∞ –≤–¥—ã—Ö–∞—é –∑–∞–ø–∞—Ö —Å–∏—Ä–µ–Ω–∏. "
    "–í—á–∏—Ç—ã–≤–∞—é—Å—å –≤ –ø–∏—Å—å–º–æ. –ü–æ—Å–ª–µ –∑–∞–º–∏—Ä–∞—é. –û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏. –û–¥–Ω–∞ –±—É–∫–≤–∞. –ü–∏—Å—å–º–æ —Å–µ—Å—Ç—Ä–µ! "
    "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã—Å—Ç—É–ø–∏–≤—à–∏–µ —Å–ª—ë–∑—ã."
)
SAMPLE_RATE = 24000  # XTTS v2 –≤—ã–¥–∞—ë—Ç 24–∫–ì—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LANGUAGE = "ru"

# --------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫
# --------------------
for path in (OUTPUT_DIR, TEMP_DIR):
    os.makedirs(path, exist_ok=True)

# --------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
# --------------------
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ XTTS v2...")
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2").to(DEVICE_STR)

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ RUAccent...")
accent_model = RUAccent()
accent_model.load(omograph_model_size="big_poetry", use_dictionary=True)

print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã.")

# --------------------
# –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
# --------------------
def accent_text(text: str) -> str:
    """–†–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–∞—Ä–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ."""
    if not text.strip():
        return ""
    return accent_model.process_all(text)

def generate_voice_xtts(accented_text: str, reference_audio: tuple) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ XTTS v2."""
    if not accented_text:
        raise gr.Error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞.")
    if reference_audio is None:
        raise gr.Error("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å (5‚Äì15 —Å–µ–∫, WAV –±–µ–∑ —à—É–º–∞).")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
    sr, audio_np = reference_audio
    ref_path = os.path.join(TEMP_DIR, "user_reference.wav")

    # XTTS —Ç—Ä–µ–±—É–µ—Ç int16 WAV
    if audio_np.dtype != np.int16:
        audio_np = audio_np / np.max(np.abs(audio_np))
        write_wav(ref_path, sr, (audio_np * 32767).astype(np.int16))
    else:
        write_wav(ref_path, sr, audio_np)

    output_path = os.path.join(OUTPUT_DIR, "final_output.wav")
    tts.tts_to_file(
        text=accented_text,
        file_path=output_path,
        speaker_wav=ref_path,
        language=LANGUAGE,
        split_sentences=True,
        speed=1.0
    )
    return output_path

# --------------------
# Gradio UI
# --------------------
with gr.Blocks(title="OpenVoice RU (XTTS v2)", theme=gr.themes.Soft()) as demo:
    gr.Markdown("## XTTS v2 Voice Clone (–†—É—Å—Å–∫–∏–π)")

    with gr.Row():
        with gr.Column(scale=2):
            text_input = gr.Textbox(label="–¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...")
            accent_button = gr.Button("–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏—è")
            accented_output = gr.Textbox(label="–¢–µ–∫—Å—Ç —Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏", interactive=True)
            audio_input = gr.Audio(label="–ê—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å (WAV, 5‚Äì15 —Å–µ–∫)", type="numpy")
            gen_button = gr.Button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant="primary")
        with gr.Column(scale=1):
            audio_output = gr.Audio(label="–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤—É–∫")

    accent_button.click(accent_text, inputs=text_input, outputs=accented_output)
    gen_button.click(generate_voice_xtts, inputs=[accented_output, audio_input], outputs=audio_output)

if __name__ == "__main__":
    demo.launch(
        share=True,
        enable_queue=True,
        server_name="0.0.0.0",
        server_port=7860
    )
