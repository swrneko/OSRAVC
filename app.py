import gradio as gr
import os
import torch
import numpy as np
from scipy.io.wavfile import write as write_wav
import warnings
import pyloudnorm as pyln

# --- 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
warnings.filterwarnings("ignore")
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ PyTorch –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ CPU
if torch.get_num_threads() > 1:
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è–¥–µ—Ä CPU
        torch.set_num_threads(os.cpu_count())
        print(f"üî• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {os.cpu_count()} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è PyTorch.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {e}")


print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
DEVICE = "cpu"
OUTPUT_DIR = "outputs"
TEMP_DIR = os.path.join(OUTPUT_DIR, "temp")
os.makedirs(TEMP_DIR, exist_ok=True)
os.makedirs('checkpoints/base_speakers/RU_SILERO', exist_ok=True) # –ü–∞–ø–∫–∞ –¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞ Silero

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
import silero
from ruaccent import RUAccent
from openvoice import se_extractor
from openvoice.api import ToneColorConverter

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS...")
# –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å
SPEAKER = 'baya' 
LANGUAGE = 'ru'
SAMPLE_RATE = 48000
# –ò—Å–ø–æ–ª—å–∑—É–µ–º torch.hub.set_dir, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫—ç—à–µ–º
torch.hub.set_dir('.') 
silero_model, _ = torch.hub.load(repo_or_dir='snakers4/silero-models', model='silero_tts', language=LANGUAGE, speaker=f'v3_1_{LANGUAGE}')
silero_model.to(DEVICE)


print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ OpenVoice Converter...")
tone_color_converter = ToneColorConverter('checkpoints/converter/config.json', device=DEVICE)
tone_color_converter.load_ckpt('checkpoints/converter/checkpoint.pth')

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ RUAccent...")
accent_model = RUAccent()
accent_model.load(omograph_model_size="big_poetry", use_dictionary=True)

# –°–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–º–±—Ä–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞ Silero
source_se_path = f'checkpoints/base_speakers/RU_SILERO/ru_{SPEAKER}_se.pth'
if not os.path.exists(source_se_path):
    print(f"‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–º–±—Ä–∞ –¥–ª—è `{SPEAKER}`...")
    ref_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–±—Ä–∞."
    ref_wav = os.path.join(TEMP_DIR, "reference_silero.wav")
    silero_model.save_wav(text=ref_text, speaker=SPEAKER, sample_rate=SAMPLE_RATE, audio_path=ref_wav)
    se, _ = se_extractor.get_se(ref_wav, tone_color_converter, target_dir=TEMP_DIR, vad=True)
    torch.save(se, source_se_path)
    print(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–º–±—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {source_se_path}")

source_se = torch.load(source_se_path, map_location=DEVICE)
print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–º–±—Ä –≥–æ—Ç–æ–≤—ã.")


# --- 2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
def accent_text(text: str) -> str:
    """–†–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–∞—Ä–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ."""
    return accent_model.process_all(text) if text.strip() else ""

def generate_voice(accented_text: str, reference_audio: tuple):
    if not accented_text.strip():
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    if reference_audio is None:
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∞—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å.")
    
    print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{accented_text}'")
    
    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∞—É–¥–∏–æ ---
    sr, arr = reference_audio
    
    if np.issubdtype(arr.dtype, np.integer):
        arr = arr.astype(np.float32) / 32767.0
    
    meter = pyln.Meter(sr)
    loudness = meter.integrated_loudness(arr)
    normalized_arr = pyln.normalize.loudness(arr, loudness, -23.0)

    ref_path = os.path.join(TEMP_DIR, "processed_reference.wav")
    write_wav(ref_path, sr, (normalized_arr * 32767).astype(np.int16))
    print(f"–†–µ—Ñ–µ—Ä–µ–Ω—Å-–∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {ref_path}")

    # --- –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã —Å –ø–æ–º–æ—â—å—é Silero ---
    print("–≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Silero...")
    base_speech_path = os.path.join(TEMP_DIR, 'base_silero_speech.wav')
    silero_model.save_wav(text=accented_text, speaker=SPEAKER, sample_rate=SAMPLE_RATE, audio_path=base_speech_path)
    print("–ë–∞–∑–∞ Silero —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

    # --- –≠—Ç–∞–ø 2: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenVoice ---
    print("–≠—Ç–∞–ø 2: –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é OpenVoice...")
    
    target_se, _ = se_extractor.get_se(ref_path, tone_color_converter, target_dir=TEMP_DIR, vad=True)
    
    output_path = os.path.join(OUTPUT_DIR, 'final_output.wav')
    tone_color_converter.convert(
        audio_src_path=base_speech_path, 
        src_se=source_se, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —ç—Ç–∞–ª–æ–Ω
        tgt_se=target_se, 
        output_path=output_path,
        message="@MyShell"
    )
    print("–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    return base_speech_path, output_path

# --- 3. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# Ultimate Voice Clone: Silero + OpenVoice")
    gr.Markdown("–ï–¥–∏–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥.")
    with gr.Row():
        with gr.Column(scale=2):
            text_input = gr.Textbox(label="–¢–µ–∫—Å—Ç", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.", lines=4)
            accent_button = gr.Button("–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏—è")
            accented_text_output = gr.Textbox(label="–¢–µ–∫—Å—Ç —Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏", interactive=True)
            audio_input = gr.Audio(label="–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å (5-30 —Å–µ–∫, WAV, –±–µ–∑ —à—É–º–∞)", type="numpy")
            generate_button = gr.Button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant="primary")
        with gr.Column(scale=1):
            silero_output = gr.Audio(label="–í—ã—Ö–æ–¥ Silero (–±–∞–∑–∞)")
            final_output = gr.Audio(label="–í—ã—Ö–æ–¥ OpenVoice (—Ñ–∏–Ω–∞–ª)")

    accent_button.click(fn=accent_text, inputs=text_input, outputs=accented_text_output)
    generate_button.click(
        fn=generate_voice,
        inputs=[accented_text_output, audio_input],
        outputs=[silero_output, final_output]
    )

# --- 4. –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    demo.launch(share=True, enable_queue=True)
