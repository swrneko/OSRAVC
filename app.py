import gradio as gr
import os
import torch
import numpy as np
from scipy.io.wavfile import write as write_wav
import warnings
import pyloudnorm as pyln

# --- 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
warnings.filterwarnings("ignore")
os.environ["TOKENIZERS_PARALLELISM"] = "false"

try:
    from TTS.tts.configs.xtts_config import XttsConfig
    from TTS.tts.models.xtts import XttsAudioConfig, XttsArgs
    from TTS.config.shared_configs import BaseDatasetConfig
    torch.serialization.add_safe_globals([XttsConfig, XttsAudioConfig, BaseDatasetConfig, XttsArgs])
except ImportError as e:
    pass


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ PyTorch ---
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è–¥–µ—Ä CPU
# –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ CPU
if torch.get_num_threads() > 1:
    torch.set_num_threads(os.cpu_count())
    print(f"üî• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {os.cpu_count()} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è PyTorch.")

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
DEVICE = "cpu"
OUTPUT_DIR = "outputs"
TEMP_DIR = os.path.join(OUTPUT_DIR, "temp")
os.makedirs(TEMP_DIR, exist_ok=True)

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
from TTS.api import TTS
from openvoice import se_extractor
from openvoice.api import ToneColorConverter

print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Coqui XTTS...")
MODEL_NAME = "xttsv2_banana"
MODEL_PATH = "xttsv2_banana"
CONFIG_PATH = "xttsv2_banana/config.json"
tts = TTS(model_name=MODEL_NAME, model_path=MODEL_PATH, config_path=CONFIG_PATH).to(DEVICE)


print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ OpenVoice Converter...")
tone_color_converter = ToneColorConverter('checkpoints/converter/config.json', device=DEVICE)
tone_color_converter.load_ckpt('checkpoints/converter/checkpoint.pth')

print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã.")

# --- 2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
def generate_voice(text: str, reference_audio: tuple):
    if not text.strip():
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    if reference_audio is None:
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∞—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å.")
    
    print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{text}'")
    
    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-–∞—É–¥–∏–æ ---
    sr, arr = reference_audio
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if np.issubdtype(arr.dtype, np.integer):
        arr = arr.astype(np.float32) / 32767.0
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    meter = pyln.Meter(sr)
    loudness = meter.integrated_loudness(arr)
    normalized_arr = pyln.normalize.loudness(arr, loudness, -23.0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
    ref_path = os.path.join(TEMP_DIR, "processed_reference.wav")
    write_wav(ref_path, sr, (normalized_arr * 32767).astype(np.int16))
    print(f"–†–µ—Ñ–µ—Ä–µ–Ω—Å-–∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {ref_path}")

    # --- –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã —Å –ø–æ–º–æ—â—å—é XTTS –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö ---
    print("–≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é XTTS...")
    base_speech_path = os.path.join(TEMP_DIR, 'base_xtts_speech.wav')
    
    # --- –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ß–ï–°–¢–í–ê XTTS ---
    # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç XTTS —Ä–∞–±–æ—Ç–∞—Ç—å "–¥–æ–ª—å—à–µ –∏ –ª—É—á—à–µ", –∫–∞–∫ —Ç—ã –∏ —Ö–æ—Ç–µ–ª
    tts.tts_to_file(
        text=text,
        file_path=base_speech_path,
        language="ru",
        speaker_wav=ref_path,
        temperature=0.7,        # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç 0.65)
        length_penalty=1.0,     # –ë–µ–∑ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –¥–ª–∏–Ω—É
        repetition_penalty=10.0, # –°–∏–ª—å–Ω–æ —à—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —É–±–∏—Ä–∞–µ—Ç "–∑–∞–∏–∫–∞–Ω–∏—è"
        top_k=50,
        top_p=0.85,
    )
    print("–ë–∞–∑–∞ XTTS —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

    # --- –≠—Ç–∞–ø 2: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenVoice –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö ---
    print("–≠—Ç–∞–ø 2: –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é OpenVoice...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º–±—Ä —Ü–µ–ª–∏ (—Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å)
    target_se, _ = se_extractor.get_se(ref_path, tone_color_converter, target_dir=TEMP_DIR, vad=True)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º–±—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Ç–æ, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª XTTS)
    source_se, _ = se_extractor.get_se(base_speech_path, tone_color_converter, target_dir=TEMP_DIR, vad=True)

    # --- –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ß–ï–°–¢–í–ê OPENVOICE ---
    output_path = os.path.join(OUTPUT_DIR, 'final_output.wav')
    tone_color_converter.convert(
        audio_src_path=base_speech_path, 
        src_se=source_se, 
        tgt_se=target_se, 
        output_path=output_path,
        message="@MyShell"
         
    )
    print("–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    return base_speech_path, output_path

# --- 3. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# Ultimate Voice Clone: XTTS + OpenVoice (Max Quality & Speed)")
    gr.Markdown("–ï–¥–∏–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏ –∏ —Ç–µ–º–±—Ä–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥.")
    with gr.Row():
        with gr.Column(scale=2):
            text_input = gr.Textbox(label="–¢–µ–∫—Å—Ç", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.", lines=4)
            audio_input = gr.Audio(label="–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å (5-30 —Å–µ–∫, WAV, –±–µ–∑ —à—É–º–∞)", type="numpy")
            generate_button = gr.Button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant="primary")
        with gr.Column(scale=1):
            xtts_output = gr.Audio(label="–í—ã—Ö–æ–¥ XTTS (–±–∞–∑–∞)")
            final_output = gr.Audio(label="–í—ã—Ö–æ–¥ OpenVoice (—Ñ–∏–Ω–∞–ª)")

    generate_button.click(
        fn=generate_voice,
        inputs=[text_input, audio_input],
        outputs=[xtts_output, final_output]
    )

# --- 4. –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    demo.launch(share=True)
